#ifndef FF_COREUTILS_H_
#define FF_COREUTILS_H_

#define FF_ASSERT_INDEX_RANGE(idx, max)																									\
	if (idx < 0 || max < idx) {																														\
		return Nan::ThrowError(FF_V8STRING("Index out of bounds: " + std::to_string(idx)));	\
	}																																											

/* TODO fix matrix, vector multiplication, division */

#define FF_OPERATOR(name, op, acceptsScalar, clazz, accessor)																							\
	if (!info[0]->IsObject()) {																																							\
		return Nan::ThrowError(FF_V8STRING(std::string(#name)																									\
			+ " - expected arg to be a Mat, Vec" + (acceptsScalar ? " or Scalar" : ""))													\
		);																																																		\
	}																																																				\
	v8::Local<v8::Object> jsObj = Nan::NewInstance(Nan::New(constructor)->GetFunction()).ToLocalChecked();	\
	Nan::ObjectWrap::Unwrap<clazz>(jsObj)->accessor =																												\
		Nan::ObjectWrap::Unwrap<clazz>(info.This())->accessor																									\
		op Nan::ObjectWrap::Unwrap<clazz>(info[0]->ToObject())->accessor;																			\
	info.GetReturnValue().Set(jsObj);																																				\

#define FF_OPERATOR_WITH_SCALAR(name, op, clazz, accessor)																								\
	if (info[0]->IsNumber()) {																																							\
		v8::Local<v8::Object> jsObj = Nan::NewInstance(Nan::New(constructor)->GetFunction()).ToLocalChecked();\
		Nan::ObjectWrap::Unwrap<clazz>(jsObj)->accessor =																											\
			Nan::ObjectWrap::Unwrap<clazz>(info.This())->accessor																								\
			op info[0]->NumberValue();																																					\
		return info.GetReturnValue().Set(jsObj);																															\
	}																																																				\
	FF_OPERATOR(name, op, true, clazz, accessor)


#define FF_MAT_OPERATOR(name, op, acceptsScalar)	\
	FF_OPERATOR(name, op, acceptsScalar, Mat, mat)

#define FF_MAT_OPERATOR_WITH_SCALAR(name, op)	\
	FF_OPERATOR_WITH_SCALAR(name, op, Mat, mat)

#endif